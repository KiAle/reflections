How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    	The diff command shows deviations between the two files. 
	So your attention was drawn to these specific lines and you don't have to look through 
	the whole text to find differences. It is easier to find typo or wrong code if you are
	only looking at the edited lines.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    	I can see when i changed what and can track down changes and their consequences.
	I can see when co-workers have changed something und ich can track down what they
	changed. In the long run i can find bugs or mistakes faster and get to know conflicts
	between different changes.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    	Pros: 
	You can devide your commits into logical pieces, like one commit per function.
	You have no intersection between working on different parts of the program.
	You have functional versions.

	Cons:
	Maybe you forget to submit commits and so you get commits with big differences in between.
	Your commits could be too big or too small.
	

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    	Git was invented for coding. In Coding you often have interactions of different
	files. This is the reason you want to save multiple files in one commit so you
	file overlapping changes in one commit. This makes sure that you have functional
	versions.

	Google Docs is for managing documents. There are not often overlapping of different
	documents. Most of the time they are stand alone. 

How can you use the commands git log and git diff to view the history of files?

    	With the command git log the terminal shows me the whole commit history of the repository.
	For each commit i see the ID, the author, the date and a description of the commit.
	If i use the option --stat with git log i also see the amount of changes, like x lines added
	and y line deleted.
	With the command git diff the terminal shows me the direct comparison between the different 
	versions of the changed files in a repository. But only the lines with changes are shown. 

How might using version control make you more confident to make changes that
could break something?

    	By using version control i always have a backup of previous, functual versions. So i 
	don't have to worry about implementing something which could break the whole code
	because i can go back to functual versions every time.

Now that you have your workspace set up, what do you want to try using Git for?

    Fill in your answer here
