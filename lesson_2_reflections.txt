What happens when you initialize a repository? Why do you need to do it?

	Git creates a repository consisting of the current folder. Git creates the meta data folder
	(.git). The files in the folder are not included into the repository. The reason for this is
	that you maybe don't want to include every file. The files are added to the repository with
	the first commit which you have to do yourself (manually). With the creating of the repository
	there is no first commit.

How is the staging area different from the working directory and the repository? What value do you think
it offers?

	The staging area is an intermediate stage between the working directory and the repository. You
	can not access it with the cd command. It is only for gathering the files to be commited. The files
	in there are still not "saved" in the repository and therefor not tracked.
	The benefit of the staging area is that you can easily gather the files for a commit in one place and
	have an overview about what will be commited.

How can you use the staging area to make sure you have one commit per logical change?

	With the commands "git diff" (compares working directory and staging area) and "git diff --staged" 
	(compares staging area and last commit) i can identify which files are changed. To commit only one logical 
	change i add only the files for this one change into the staging area and commit then. After the commit i
	can add the other files for an other logical change and commit them.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	If i want to test features i'm not sure to includ into the program. If i want to create similar versions of 
	a program with slightly different features. If i want an experimental branch to test code.

How do the diagrams help you visualize the branch structure?

	I can see at which commit the two branches divide and see which further commits belong to which branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	The files from one branch are merged with their counterpart from the other branch. The code in this files 
	will be combined. 
	
What are the pros and cons of Git's automatic merging vs. always doing merges manually?

	Pros: It would be a lot of work do merge every file manually and still for one file with a lot of code it 
	could be a lot of work.

	Cons: There still can be situations Git can not resolve. So you have to resolve these conflicts on your own.
